version: '3.8'

services:
  # Depends on server. NGINX will throw errors if api endpoints are not setup.
  client:
    build:
      context: ../apps/client # relative to docker compose
      dockerfile: ../../docker/Dockerfile.client # relative to build context
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # relative to docker compose
    depends_on:
      - server

  # Depends on database. Database must be healthy before starting server
  server:
    build:
      context: ../apps/server # relative to docker compose
      dockerfile: ../../docker/Dockerfile.server # relatvie to build context
    ports:
      - "8000:8000"
    depends_on:
        db:
          condition: service_healthy
        redis:
          condition: service_healthy
    volumes:
      - ./.env:/app/.env # relative to docker compose
      - ./server-entrypoint.sh:/app/server-entrypoint.sh # relative to docker compose

  # MySQL service. Has healthcheck which uses mysqladmin to ping before reporting healthy.
  db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
    volumes:
      - ./mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DATABASE_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
    env_file:
      - path: ./.env # relative to docker compose (has to be in same directory)
        required: true

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

version: "3.8"

services:
  # Depends on server. NGINX will throw errors if api endpoints are not setup.
  client:
    build:
      context: ../../apps/client # relative to docker compose
      dockerfile: ../../docker/buildFiles/Dockerfile.client # relative to build context
      args:
        VITE_USE_HTTP: ${USE_HTTP}
        VITE_ENVIRONMENT: ${VITE_ENVIRONMENT}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${NGINX_FILE}:/etc/nginx/nginx.conf.template # relative to docker compose
      - ${SSL_SOURCE_DIRECTORY}:${SSL_TARGET_MOUNTED_DIRECTORY}:ro
      - ./client-entrypoint.sh:/app/client-entrypoint.sh # relative to docker compose
    depends_on:
      - server
    env_file:
      - path: ${DOCKER_ENV_FILE} # relative to docker compose (has to be in same directory)
        required: true

  # Depends on database. Database must be healthy before starting server
  server:
    build:
      context: ../../apps/server # relative to docker compose
      dockerfile: ../../docker/buildFiles/Dockerfile.server # relatvie to build context
    ports:
      - "8000:8000"
    environment:
      DJANGO_ENV_FILE: "/app/.env"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ${DOCKER_ENV_FILE}:/app/.env # relative to docker compose
      - ./server-entrypoint.sh:/app/server-entrypoint.sh # relative to docker compose

  celery:
    build:
      context: ../../apps/server # relative to docker compose
      dockerfile: ../../docker/buildFiles/Dockerfile.celery # relatvie to build context
    command:
      [
        "celery",
        "--app",
        "celery_app",
        "worker",
        "--loglevel",
        "info",
        "--without-heartbeat",
        "-c",
        "4",
      ]
    # Docker Compose does not set the TTY width, which causes Celery errors
    tty: false
    environment:
      DJANGO_ENV_FILE: "/app/.env"
    volumes:
      - ${DOCKER_ENV_FILE}:/app/.env # relative to docker compose
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  # MySQL service. Has healthcheck which uses mysqladmin to ping before reporting healthy.
  db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
    volumes:
      - ${MYSQL_VOLUME_LOCATION}:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${DATABASE_ROOT_PASSWORD}",
        ]
      timeout: 20s
      retries: 10
    env_file:
      - path: ${DOCKER_ENV_FILE} # relative to docker compose (has to be in same directory)
        required: true

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    # When run with a TTY, minio prints credentials on startup
    tty: true
    command: "server --address ':9000' --console-address ':9001' /data"
    environment:
      MINIO_ROOT_USER: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_STORAGE_SECRET_KEY}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: ["CMD-SHELL", "/minio-healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${MINIO_VOLUME_LOCATION}:/data
      - ./minio-healthcheck.sh/:/minio-healthcheck.sh
